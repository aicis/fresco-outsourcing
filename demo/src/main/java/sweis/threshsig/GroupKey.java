package sweis.threshsig;

import java.math.BigInteger;

/**
 * A GroupKey with information common to all the keyshares. Generated by the
 * Dealer class
 * 
 * Reference: "Practical Threshold Signatures",<br>
 * Victor Shoup (sho@zurich.ibm.com), IBM Research Paper RZ3121, 4/30/99<BR>
 * 
 * @author Steve Weis <sweis@mit.edu>
 */

// TODO: Investigate the security of reusing the key parameters (q,p) with a
// new Poly, since they are computationally expensive
public class GroupKey {
  /** (k,l) Parameters. k out of l shares needed for a signature */
  private int k, l;

  /** The exponent of the groupKeyPair */
  private BigInteger e;

  /** The RSA modulus of the groupKeyPair */
  private BigInteger n;

  public GroupKey(final int k, final int l, final int keysize, final BigInteger v,
      final BigInteger e, final BigInteger n) {
    this.k = k;
    this.l = l;
    this.e = e;
    this.n = n;
  }

  /**
   * Returns the minimum threshold size
   * 
   * @return The minimum threshold size for this group 'k'.
   */
  public int getK() {
    return k;
  }

  /**
   * Returns the group size
   * 
   * @return The size of this key's associated group.
   */
  public int getL() {
    return l;
  }

  /**
   * Returns the group key modulus
   * 
   * @return This group's modulus.
   */
  public BigInteger getModulus() {
    return n;
  }

  /**
   * Returns the group key exponent
   * 
   * @return This group's exponent
   */
  public BigInteger getExponent() {
    return e;
  }
}
